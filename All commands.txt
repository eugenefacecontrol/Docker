docker ps } show running containers
docker ps -all } show the last container
docker ps --all } show all containers
docker run <image name> } create + start container
docker run -d <image name> } create + start container in the background
docker run -e CI=true <image name> } run the container without interaction
docker run busybox (echo Hello there | ls) } override the default command with new (if it supports it)
docker run -it <image name> <command name> } run a new container from image with the following command (e.g. sh)
docker run -p <local port>:<container port> <image name> } every time I run the container, redirect incoming requests on local port <local port> to the port <container port> inside the controller
docker run -it -v <bookmark on the specified folder> -v <<folder outside the container>:<folder inside the container>> <image name> } run the image with the bookmark on the specified folder and map folder inside the container to the folder outside the container. Note: Do not use '$(pwd)' variable, use '~' instead. Example: docker run -it -p 3000:3000 -v /home/node/app/node_modules -v ~/frontend:/home/node/app <image_id>
docker create <image name> } create container from image and return its id
docker create -p <local port>:<container port> <image name> } create container with redirected incoming requests on local port <local port> to the port <container port> inside the controller
docker start -a <container id> } start created container
docker start -a <container id> --rm } delete the container after it is stopped
docker logs <container id> } get log (all the information) from the container - you can use only after docker start <controller id>

docker stop <container id> } stop container from running with some time to cleanup
docker kill <container id> } stop container from running instantly
docker exec -it <container id> <command> } execute another command on specific container, -it allows us to provide input text to the container. -i means provide all the input text to the stdin. -t formats the text and little more
docker exec -it <container id> sh } open shell (command processer) on specific container
Ctrl + D } exit the shell. Or just use word 'exit'

docker build . } build the current project. Returns "writing image sha256:4e9898c2e20bb65776290534c40ed6e84d22d661a0fafc2b86d18fc278e0f34d" as output. characters after "sha256:" are image id. If "buildkit": false, then the result will be like this: "Successfully built f066c38ba027"~
docker build -t yauhenisheima/<image name>:<tag name> . } build the current project with tagged name by witch you will b e able to call it. Tag "latest" will be automatically added, so you don't need to specify it
docker build -f Dockerfile.dev . } build the current project with specified docker file

docker system prune } remove all stopped containers and images
docker system prune -f } remove all stopped containers, volumes and images

docker commit -c "CMD 'redis-server'" <container id> } Create image from container

docker attach <container id> } we are attaching to the stdin, stdout and stderr of the container
docker-compose up } docker run <image name>
docker-compose up --build } docker build . + docker run <image name>
docker-compose up -d} docker run <image name> in the backround
docker-compose down } stop all the containers
docker-compose up --build --remove-orphans } remove unused services

npm run start } starts a development server
npm run test } runs tests associated with the project
npm run build } builds a production version of the application
-------------------------------------------------------
Kubernetes
kubectl version } print client and server versions
kubectl apply -f <filename> } kubectl - CLI (Command line interfrace) we use to change our Kubernetes cluster; apply - Change the currect configuration of our cluster; -f - We want to specify a file that has the config changes; <filename> - Path to the file with the config
kubectl get pods -o wide} get - We want to retrieve information about a runnings object; pods - specifies the object type that we want to get information about, -o wide - additional information
kubectl get storageclass } get available storages
kubectl get pv } get persistent volumes
kubectl get pvc } get persistent volume claims
kubectl get pods -n ingress-nginx } get ingress processes
kubectl describe <object type> <object name> } describe - We want to get detailed info, <object type> can be singular or plural (e.g. pod(s)), <object name> is optional
kubectl delete -f <config file> } delete the obect via config file. <config file> - Path to the config file that created this object
kubectl delete <object type> <object name> } delete the object via object type and name
kubectl set image <object type>/<object name> <container name>=<new image to use>} set - We want to change a property, image - We want to change image property,<obect name> - object name specified in the corresponding yaml config file (metadata > name) <container name> - name specified in the corresponding yaml config file (template > spec > containers[0] > name)
kubectl create secret generic <secret name> --from-literal key=value } create - Imperative command to create a new object, secret - Type of object we are going to create, generic - Type of a secret (also, there is a tls), <secret name> - Name of secret, for later reference in a pod config; --from-literal - We are going to add the secret information into this command, as opposed to from file, key=value - Key-value pair of the secret information

There are several types of created objects: StatefulSet, ReplicaController, Pod - running one container or more, Service - setting up networking, Deployment - maintains a set of identical pods, ensuring that they have the correct config and that the right number exists, Volumes - A particular object that allows a container to store data at the pod level, PersistentVolumes, PersistentVolumeClaim, Secrets - Securely stores a piece of information in the cluster, such as a database password
Service has 4 sub-types: ClusterIP (Exposes a set of pods to other objects in the cluster), NodePort (Exposes a container to the outside world), LoadBalancer (Legacy way of getting network traffic into a cluster) and Ingress (Exposes a set of services to the outside word)
